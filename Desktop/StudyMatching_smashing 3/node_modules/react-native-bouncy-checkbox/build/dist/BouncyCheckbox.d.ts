import * as React from "react";
import { Animated, StyleProp, ViewStyle, TextStyle, ImageSourcePropType, TouchableWithoutFeedbackProps, ImageStyle } from "react-native";
type BaseTouchableProps = Pick<TouchableWithoutFeedbackProps, Exclude<keyof TouchableWithoutFeedbackProps, "onPress">>;
export interface IBouncyCheckboxProps extends BaseTouchableProps {
    size?: number;
    text?: string;
    fillColor?: string;
    isChecked?: boolean;
    unfillColor?: string;
    disableText?: boolean;
    bounceEffect?: number;
    bounceFriction?: number;
    useNativeDriver?: boolean;
    disableBuiltInState?: boolean;
    ImageComponent?: any;
    TouchableComponent?: any;
    bounceEffectIn?: number;
    bounceEffectOut?: number;
    bounceVelocityIn?: number;
    bounceVelocityOut?: number;
    bouncinessIn?: number;
    bouncinessOut?: number;
    iconComponent?: React.ReactNode;
    textComponent?: React.ReactNode;
    iconStyle?: StyleProp<ViewStyle>;
    innerIconStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    textStyle?: StyleProp<TextStyle>;
    iconImageStyle?: StyleProp<ImageStyle>;
    textContainerStyle?: StyleProp<ViewStyle>;
    checkIconImageSource?: ImageSourcePropType;
    onPress?: (checked: boolean) => void;
}
interface IState {
    checked: boolean;
    springValue: Animated.Value;
    bounceValue: Animated.Value;
}
declare class BouncyCheckbox extends React.Component<IBouncyCheckboxProps, IState> {
    constructor(props: IBouncyCheckboxProps);
    componentDidMount(): void;
    bounceEffect: (value: number, velocity: number, bounciness: number) => void;
    renderCheckIcon: () => JSX.Element;
    renderCheckboxText: () => string | number | boolean | React.ReactFragment | JSX.Element;
    onPress: () => void;
    render(): JSX.Element;
}
export default BouncyCheckbox;
